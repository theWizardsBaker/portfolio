(this.webpackJsonpportfolio=this.webpackJsonpportfolio||[]).push([[0],{222:function(e,t,n){},223:function(e,t,n){"use strict";n.r(t);var a=n(0),s=n.n(a),i=n(19),o=n.n(i),l=(n(29),n(9)),r=n(10),m=n(12),c=n(11),u=n(13),d=n(20),p=n.n(d),h=n(5);function f(){var e=Object(h.f)().pathname;return Object(a.useEffect)((function(){window.scrollTo(0,0)}),[e]),null}var b=n(8),_=function(e){function t(){return Object(l.a)(this,t),Object(m.a)(this,Object(c.a)(t).apply(this,arguments))}return Object(u.a)(t,e),Object(r.a)(t,[{key:"render",value:function(){return s.a.createElement("nav",{className:"navbar is-transparent"},s.a.createElement("div",{className:"navbar-end"},this.props.routes.map((function(e,t){return s.a.createElement(b.b,{key:t,to:e.path,activeClassName:"is-active",className:"navbar-item",exact:!0},e.name)}))))}}]),t}(s.a.Component);_.defaultProps={routes:[]};var g='\n#!/usr/bin/env ruby\nrequire \'artii\'\nrequire \'colorize\'\nrequire \'filesize\'\n\n# don\'t throw an error on exit\ntrap "SIGINT" do\n  puts "\n Quitting..."\n  exit 130\nend\n\nbegin\n  \n  # splash screen\n  artii = Artii::Base.new({})\n  puts artii.asciify(\'SBatch Generator\').blue\n  # directions\n  puts "Generate a #{"SLURM bash script ".yellow} to run jobs on the rnet research cluster\n\n"\n  # puts "Run this command with -h for a list of more options\n\n"\n  printf "Press "\n  printf "Ctrl + C ".red\n  puts "at any time to quit\n\n"\n\n  # create time element\n  t = Time.now \n  # get the script name\n  printf "Enter a new SBatch script #{"job name".green} ( leave blank for `sbatch_[date]` default ): "\n  job_name = gets.chomp\n  job_name = "sbatch_#{t.strftime("%Y_%m_%d")}" if job_name.empty?\n\n  # our list of nodes\n  nodes = []\n  # list of node header elements\n  node_header = []\n\n  # get all the cluster info\n  # contents = `sinfo -S partitionname -O partitionname,available,cpus,cpusstate,defaulttime,freemem,memory`\n  # for testing only \n  contents = `cat sinfo_output`\n  # put all the clusters into a selectable object\n  contents.split("\n").each_with_index do |line, index| \n    line = line.split("s")\n    # get our header rows\n    if index < 1\n      node_header = line \n      next\n    end\n    # create a node\n    nodes.push({\n      name: line[0],\n      available: line[1],\n      cpus: line[2].sub(\'+\', \'\').to_i,\n      cpus_state: line[3].split("/"),\n      time_limit: line[4],\n      free_memory: line[5].to_i,\n      total_memory: line[6].sub(\'+\', \'\').to_i\n    })\n  end\n  # list our nodes\n  nodes.each.with_index(1) do |node, index|  \n    puts "#{index}) #{node[:name]}".green\n    free = (node[:cpus_state][1].to_f / (node[:cpus_state][0].to_f.nonzero? || node[:cpus_state][1].to_f) ) * 100\n    puts "[ CPU => #{node[:cpus]} (#{free.to_i} % free), MEM => #{Filesize.from("#{node[:total_memory]} MB").to_s("GB")} (#{Filesize.from("#{node[:free_memory]} MB").to_s("GB")} free), TIME LIMIT => #{node[:time_limit]} ]".colorize((:red unless node[:available].eql? \'up\'))\n    puts "-----------------------------"\n  end\n\n  # get the cluster to use\n  # node_selection.is_a? Numeric and \n  node_selection = 0\n  until (1..nodes.size).include? node_selection\n    printf "\nSelect a cluster from the list above to run on (number): "\n    node_selection = gets.chomp.to_i\n  end\n\n  # get the node\n  selected_node = nodes[node_selection - 1]\n\n  # get cpu usage\n  cpus = 0\n  until (1..selected_node[:cpus]).include? cpus\n    puts "\nThe #{selected_node[:name]} node has #{selected_node[:cpus].to_s.green} total CPUs available."\n    printf "Number of CPUs to use: "\n    cpus = gets.chomp.to_i\n  end\n\n  # get the memory\n  memory = 0\n  until (1..selected_node[:total_memory]).include? memory.to_i and memory =~ /d*[M|G]/\n    # get memory size\n    mem_gb = Filesize.from(selected_node[:total_memory].to_s + "MB").to_s("GB")\n    # print memory\n    puts "\n#{"#{selected_node[:total_memory]} MB".green} (#{mem_gb.green}) total memory is available."\n    printf "Amount of Memory to use (suffix #{"M".green} for megabytes and #{"G".green} for gigabytes): "\n    memory = gets.chomp.upcase\n    memory = memory.gsub(/s/, \'\')\n  end\n\n  # figure out time\n  selected_node[:time_limit]\n  days = selected_node[:time_limit].slice!(/d*-/)\n  hours, minutes, seconds = selected_node[:time_limit].split(":")\n\n  time = ""\n  # make sure it\'s in a close enough format\n  until time =~ /(d-)?d{1,2}(:d{1,2})*/\n    printf "\nThe maximum time alloted is"\n    printf " #{days[/d*/]} days".green if days \n    printf " #{hours} hours".green if hours and hours != \'00\'\n    printf " #{minutes} minutes".green if minutes and minutes != \'00\'\n    printf " #{seconds} seconds".green if seconds and seconds != \'00\'\n    puts "."\n    puts "Time formats include:"\n    puts "minutes (20) \nminutes:seconds (20:15) \nhours:minutes:seconds (2:20:15)\ndays-hours (1-2)\ndays-hours:minutes (1-2:20) \ndays-hours:minutes:seconds (1-2:20:15)".yellow\n    printf  "Estimate job completion time: "\n    time = gets.chomp\n    time = time.gsub(/[A-z]/, \'\')\n    time = selected_node[:time_limit] if time.empty?\n  end\n\n\n  # check if notifications\n  printf "\nWould you like email notification for you job\'s status? (yes / no): "\n  updates = gets.chomp.downcase.match(/^y/)\n\n\n  email = ""\n  update_types = ""\n  if updates\n    until not email.empty? \n      printf "Enter your #{"email".green}: "\n      email = gets.chomp.downcase\n    end\n\n    until %w( BEGIN END FAIL ALL ).include? update_types\n      puts "Select the job status for notifications"\n      printf "select #{"BEGIN END FAIL".green} or #{"ALL".green}: "\n      update_types = gets.chomp.upcase\n    end\n  end\n\n\n  # get the output name\n  puts "\nEnter the #{"command".green} to execute."\n  puts "If you need to execute multiple lines, it is recommended to leave this blank and edit the #{"#{job_name}.sh".green} file after creation."\n  printf "Command: "\n  code_snip = gets.chomp\n\n  # get the output name\n  puts "\nThe results from the commands above will be placed in an output file."\n  printf "Enter an output file name ( leave blank for `#{job_name}_[job-id].out` default ): "\n  output_file = gets.chomp\n  output_file = "#{job_name}_%j.out" if output_file.empty?\n\n\n  File.open("#{job_name}.sh", \'w\') do |f|\n    f.write("#!/bin/bash")\n    f.write("\n## sbatch params:\n## more params found here https://slurm.schedmd.com/sbatch.html\n## ----------------------------\n#SBATCH --partition=#{selected_node[:name]}\n#SBATCH --time=#{time}\n#SBATCH --cpus-per-task=#{cpus} \n#SBATCH --mem=#{memory}\n#SBATCH --job-name=#{job_name}\n#SBATCH --output=#{output_file}")\n    if updates\n      f.write("\n#SBATCH --mail-type=#{update_types}\n#SBATCH --mail-user=#{email}")\n    end\n    f.write("       \n## place your code to run below:\n## ----------------------------\n## example: \n## echo \'Hello World!\'\n#{code_snip}\n      ")\n  end\n\n  puts "----------------------------"\n  puts "\n\nThe file #{"#{job_name}.sh".yellow} has been written to: #{Dir.pwd.yellow}"\n  puts "You may run this job with the command: #{"sbatch #{job_name}.sh".yellow}"\nrescue Exception => e\n  puts e\nend\n',y=(n(222),function(e){function t(e){var s;return Object(l.a)(this,t),(s=Object(m.a)(this,Object(c.a)(t).call(this,e))).state={routes:[{path:"/",name:"Programming",title:"{ Developer Administrator Co-Founder }",component:Object(a.lazy)((function(){return n.e(6).then(n.bind(null,226))}))},{path:"/artwork",name:"Artwork",title:"Scratchboards &bull; Portraits &bull; Digital Art",component:Object(a.lazy)((function(){return Promise.all([n.e(3),n.e(4)]).then(n.bind(null,227))}))},{path:"/games",name:"Games",title:"&lsaquo; Games Projects Testing &rsaquo;",component:Object(a.lazy)((function(){return n.e(5).then(n.bind(null,228))}))}]},s}return Object(u.a)(t,e),Object(r.a)(t,[{key:"render",value:function(){return s.a.createElement("div",{className:"App"},s.a.createElement(b.a,null,s.a.createElement(f,null),s.a.createElement("header",{className:"hero is-warning"},s.a.createElement("div",{className:"hero-head"},s.a.createElement(_,{routes:this.state.routes})),s.a.createElement("div",{className:"hero-body"},s.a.createElement("div",{className:"header-content"},s.a.createElement("div",{className:"columns"},s.a.createElement("div",{className:"column is-7-desktop is-8-tablet"},s.a.createElement("h1",{className:"title drop-shadow is-huge is-hidden-mobile"},"Justin"),s.a.createElement("h1",{className:"title drop-shadow is-huge is-hidden-mobile"},"Le Tourneau"),s.a.createElement("h1",{className:"subtitle drop-shadow is-3 is-spaced is-hidden-mobile has-text-primary"},"justin.letourn@gmail.com"),s.a.createElement("h3",{className:"subtitle drop-shadow is-4 is-hidden-mobile has-text-spaced"},this.state.routes.map((function(e,t){return s.a.createElement(h.a,{key:t,path:e.path,children:s.a.createElement("span",{dangerouslySetInnerHTML:{__html:e.title}}),exact:!0})}))),s.a.createElement("h1",{className:"title is-1 is-hidden-tablet has-text-centered is-marginless"},"Justin"),s.a.createElement("h1",{className:"title is-1 is-hidden-tablet has-text-centered"},"Le Tourneau"),s.a.createElement("h1",{className:"subtitle drop-shadow is-5 is-spaced is-hidden-tablet has-text-primary has-text-centered"},"justin.letourn@gmail.com"),s.a.createElement("h3",{className:"subtitle is-5 is-hidden-tablet has-text-centered has-text-spaced"},this.state.routes.map((function(e,t){return s.a.createElement(h.a,{key:t,path:e.path,children:s.a.createElement("span",{dangerouslySetInnerHTML:{__html:e.title}}),exact:!0})})))),s.a.createElement("div",{className:"column is-hidden-mobile"},s.a.createElement("div",{className:"hero-right"},s.a.createElement("div",{className:"scroll-content-down"},s.a.createElement(p.a,{className:"code-snip",language:"CodeSnip.language"},g)))))))),s.a.createElement(a.Suspense,{fallback:s.a.createElement("div",null,"Loading...")},s.a.createElement(h.c,null,this.state.routes.map((function(e,t){return s.a.createElement(h.a,{key:t,path:e.path,component:e.component,exact:!0})}))))),s.a.createElement("div",{className:"footer"},s.a.createElement("div",{className:"hero"},s.a.createElement("div",{className:"columns is-mobile"},s.a.createElement("div",{className:"column is-2-tablet is-4-mobile"},s.a.createElement("div",{className:"level is-mobile"},s.a.createElement("div",{className:"level-item has-text-centered"},s.a.createElement("a",{href:"letourneau_resume.pdf",target:"_blank"},s.a.createElement("span",{className:"icon is-link is-small is-spaced"},s.a.createElement("i",{className:"fa fa-file-text","aria-hidden":"true"})))),s.a.createElement("div",{className:"level-item has-text-centered"},s.a.createElement("a",{href:"https://github.com/theWizardsBaker"},s.a.createElement("span",{className:"icon is-link is-small is-spaced"},s.a.createElement("i",{className:"fa fa-github","aria-hidden":"true"})))),s.a.createElement("div",{className:"level-item has-text-centered"},s.a.createElement("a",{href:"mailto:justin.letourn@gmail.com"},s.a.createElement("span",{className:"icon is-link is-small is-spaced"},s.a.createElement("i",{className:"fa fa-envelope","aria-hidden":"true"})))),s.a.createElement("div",{className:"level-item has-text-centered"},s.a.createElement("a",{href:"https://www.facebook.com/justin.letourneau"},s.a.createElement("span",{className:"icon is-link is-small is-spaced"},s.a.createElement("i",{className:"fa fa-facebook","aria-hidden":"true"}))))))),s.a.createElement("div",null,s.a.createElement("p",null,"\xa9 Justin Le Tourneau, 2020")))))}}]),t}(s.a.Component));o.a.render(s.a.createElement(y,null),document.getElementById("root"))},24:function(e,t,n){e.exports=n(223)},29:function(e,t,n){}},[[24,1,2]]]);
//# sourceMappingURL=main.b0e8aca2.chunk.js.map