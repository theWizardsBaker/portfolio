{"version":3,"sources":["components/ScrollToTop.js","components/Navbar.js","components/CodeSnip.js","App.js","index.js"],"names":["ScrollToTop","pathname","useLocation","useEffect","window","scrollTo","Navbar","className","this","props","routes","map","route","index","key","to","path","activeClassName","exact","name","React","Component","defaultProps","App","state","title","component","lazy","children","dangerouslySetInnerHTML","__html","language","CodeSnip","fallback","href","target","aria-hidden","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b0e8aca2.chunk.js","sourcesContent":["import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}","import React from 'react';\nimport { NavLink } from \"react-router-dom\";\n\nexport default class Navbar extends React.Component {\n\n\tstatic defaultProps = {\n\t\troutes: []\n\t};\n\n  render() {\n    return (\n      <nav className=\"navbar is-transparent\">\n\t      <div className=\"navbar-end\">\n\t\t\t      {\n\t\t\t        this.props.routes.map((route, index) => {\n\t\t\t            return  <NavLink key={index} \n\t\t\t            \t\t\t\t\t\t\t\t to={route.path} \n\t\t\t            \t\t\t\t\t\t\t\t activeClassName=\"is-active\" \n\t\t\t            \t\t\t\t\t\t\t\t className=\"navbar-item\"\n\t\t\t            \t\t\t\t\t\t\t\t exact>\n\t\t\t            \t{route.name}\n\t\t\t            </NavLink>\n\t\t\t        })\n\t\t\t      }\n\t\t    </div>\n      </nav>\n    );\n  }\n\n}\n","const code= `\n#!/usr/bin/env ruby\nrequire 'artii'\nrequire 'colorize'\nrequire 'filesize'\n\n# don't throw an error on exit\ntrap \"SIGINT\" do\n  puts \"\\n Quitting...\"\n  exit 130\nend\n\nbegin\n  \n  # splash screen\n  artii = Artii::Base.new({})\n  puts artii.asciify('SBatch Generator').blue\n  # directions\n  puts \"Generate a #{\"SLURM bash script \".yellow} to run jobs on the rnet research cluster\\n\\n\"\n  # puts \"Run this command with -h for a list of more options\\n\\n\"\n  printf \"Press \"\n  printf \"Ctrl + C \".red\n  puts \"at any time to quit\\n\\n\"\n\n  # create time element\n  t = Time.now \n  # get the script name\n  printf \"Enter a new SBatch script #{\"job name\".green} ( leave blank for \\`sbatch_[date]\\` default ): \"\n  job_name = gets.chomp\n  job_name = \"sbatch_#{t.strftime(\"%Y_%m_%d\")}\" if job_name.empty?\n\n  # our list of nodes\n  nodes = []\n  # list of node header elements\n  node_header = []\n\n  # get all the cluster info\n  # contents = \\`sinfo -S partitionname -O partitionname,available,cpus,cpusstate,defaulttime,freemem,memory\\`\n  # for testing only \n  contents = \\`cat sinfo_output\\`\n  # put all the clusters into a selectable object\n  contents.split(\"\\n\").each_with_index do |line, index| \n    line = line.split(\"\\s\")\n    # get our header rows\n    if index < 1\n      node_header = line \n      next\n    end\n    # create a node\n    nodes.push({\n      name: line[0],\n      available: line[1],\n      cpus: line[2].sub('+', '').to_i,\n      cpus_state: line[3].split(\"/\"),\n      time_limit: line[4],\n      free_memory: line[5].to_i,\n      total_memory: line[6].sub('+', '').to_i\n    })\n  end\n  # list our nodes\n  nodes.each.with_index(1) do |node, index|  \n    puts \"#{index}) #{node[:name]}\".green\n    free = (node[:cpus_state][1].to_f / (node[:cpus_state][0].to_f.nonzero? || node[:cpus_state][1].to_f) ) * 100\n    puts \"[ CPU => #{node[:cpus]} (#{free.to_i} % free), MEM => #{Filesize.from(\"#{node[:total_memory]} MB\").to_s(\"GB\")} (#{Filesize.from(\"#{node[:free_memory]} MB\").to_s(\"GB\")} free), TIME LIMIT => #{node[:time_limit]} ]\".colorize((:red unless node[:available].eql? 'up'))\n    puts \"-----------------------------\"\n  end\n\n  # get the cluster to use\n  # node_selection.is_a? Numeric and \n  node_selection = 0\n  until (1..nodes.size).include? node_selection\n    printf \"\\nSelect a cluster from the list above to run on (number): \"\n    node_selection = gets.chomp.to_i\n  end\n\n  # get the node\n  selected_node = nodes[node_selection - 1]\n\n  # get cpu usage\n  cpus = 0\n  until (1..selected_node[:cpus]).include? cpus\n    puts \"\\nThe #{selected_node[:name]} node has #{selected_node[:cpus].to_s.green} total CPUs available.\"\n    printf \"Number of CPUs to use: \"\n    cpus = gets.chomp.to_i\n  end\n\n  # get the memory\n  memory = 0\n  until (1..selected_node[:total_memory]).include? memory.to_i and memory =~ /\\d*[M|G]/\n    # get memory size\n    mem_gb = Filesize.from(selected_node[:total_memory].to_s + \"MB\").to_s(\"GB\")\n    # print memory\n    puts \"\\n#{\"#{selected_node[:total_memory]} MB\".green} (#{mem_gb.green}) total memory is available.\"\n    printf \"Amount of Memory to use (suffix #{\"M\".green} for megabytes and #{\"G\".green} for gigabytes): \"\n    memory = gets.chomp.upcase\n    memory = memory.gsub(/\\s/, '')\n  end\n\n  # figure out time\n  selected_node[:time_limit]\n  days = selected_node[:time_limit].slice!(/\\d*-/)\n  hours, minutes, seconds = selected_node[:time_limit].split(\":\")\n\n  time = \"\"\n  # make sure it's in a close enough format\n  until time =~ /(\\d-)?\\d{1,2}(:\\d{1,2})*/\n    printf \"\\nThe maximum time alloted is\"\n    printf \" #{days[/\\d*/]} days\".green if days \n    printf \" #{hours} hours\".green if hours and hours != '00'\n    printf \" #{minutes} minutes\".green if minutes and minutes != '00'\n    printf \" #{seconds} seconds\".green if seconds and seconds != '00'\n    puts \".\"\n    puts \"Time formats include:\"\n    puts \"minutes (20) \\nminutes:seconds (20:15) \\nhours:minutes:seconds (2:20:15)\\ndays-hours (1-2)\\ndays-hours:minutes (1-2:20) \\ndays-hours:minutes:seconds (1-2:20:15)\".yellow\n    printf  \"Estimate job completion time: \"\n    time = gets.chomp\n    time = time.gsub(/[A-z]/, '')\n    time = selected_node[:time_limit] if time.empty?\n  end\n\n\n  # check if notifications\n  printf \"\\nWould you like email notification for you job's status? (yes / no): \"\n  updates = gets.chomp.downcase.match(/^y/)\n\n\n  email = \"\"\n  update_types = \"\"\n  if updates\n    until not email.empty? \n      printf \"Enter your #{\"email\".green}: \"\n      email = gets.chomp.downcase\n    end\n\n    until %w( BEGIN END FAIL ALL ).include? update_types\n      puts \"Select the job status for notifications\"\n      printf \"select #{\"BEGIN END FAIL\".green} or #{\"ALL\".green}: \"\n      update_types = gets.chomp.upcase\n    end\n  end\n\n\n  # get the output name\n  puts \"\\nEnter the #{\"command\".green} to execute.\"\n  puts \"If you need to execute multiple lines, it is recommended to leave this blank and edit the #{\"#{job_name}.sh\".green} file after creation.\"\n  printf \"Command: \"\n  code_snip = gets.chomp\n\n  # get the output name\n  puts \"\\nThe results from the commands above will be placed in an output file.\"\n  printf \"Enter an output file name ( leave blank for \\`#{job_name}_[job-id].out\\` default ): \"\n  output_file = gets.chomp\n  output_file = \"#{job_name}_%j.out\" if output_file.empty?\n\n\n  File.open(\"#{job_name}.sh\", 'w') do |f|\n    f.write(\"#!/bin/bash\")\n    f.write(\"\n## sbatch params:\n## more params found here https://slurm.schedmd.com/sbatch.html\n## ----------------------------\n#SBATCH --partition=#{selected_node[:name]}\n#SBATCH --time=#{time}\n#SBATCH --cpus-per-task=#{cpus} \n#SBATCH --mem=#{memory}\n#SBATCH --job-name=#{job_name}\n#SBATCH --output=#{output_file}\")\n    if updates\n      f.write(\"\n#SBATCH --mail-type=#{update_types}\n#SBATCH --mail-user=#{email}\")\n    end\n    f.write(\"       \n## place your code to run below:\n## ----------------------------\n## example: \n## echo 'Hello World!'\n#{code_snip}\n      \")\n  end\n\n  puts \"----------------------------\"\n  puts \"\\n\\nThe file #{\"#{job_name}.sh\".yellow} has been written to: #{Dir.pwd.yellow}\"\n  puts \"You may run this job with the command: #{\"sbatch #{job_name}.sh\".yellow}\"\nrescue Exception => e\n  puts e\nend\n`;\n\nconst language = 'ruby'\n\nexport default { code: code, language: language };","import React, { Suspense, lazy } from 'react';\nimport Highlight from 'react-highlight'\nimport ScrollToTop from './components/ScrollToTop.js'\nimport Navbar from './components/Navbar.js'\nimport CodeSnip from './components/CodeSnip.js'\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nimport './App.sass';\n\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      routes: [\n        {\n          path: '/',\n          name: 'Programming',\n          title: \"\\{ Developer Administrator Co-Founder \\}\",\n          component: lazy(() => import('./components/HomePage'))\n        },\n        {\n          path: '/artwork',\n          name: 'Artwork',\n          title: 'Scratchboards &bull; Portraits &bull; Digital Art',\n          component: lazy(() => import('./components/Artwork'))\n        },\n        {\n          path: '/games',\n          name: 'Games',\n          title: '&lsaquo; Games Projects Testing &rsaquo;',\n          component: lazy(() => import('./components/Games'))\n        }\n      ],\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <BrowserRouter>\n          {/* component to scroll to top */}\n          <ScrollToTop />\n          <header className=\"hero is-warning\">\n            <div className=\"hero-head\">\n              {/* show navbar */}\n              <Navbar routes={this.state.routes} />\n            </div>\n            {/* page headder */}\n            <div className=\"hero-body\">\n              <div className=\"header-content\">\n                <div className=\"columns\">\n                  <div className=\"column is-7-desktop is-8-tablet\">\n                    <h1 className=\"title drop-shadow is-huge is-hidden-mobile\">Justin</h1>\n                    <h1 className=\"title drop-shadow is-huge is-hidden-mobile\">Le Tourneau</h1>\n                    <h1 className=\"subtitle drop-shadow is-3 is-spaced is-hidden-mobile has-text-primary\">justin.letourn@gmail.com</h1>\n                    <h3 className=\"subtitle drop-shadow is-4 is-hidden-mobile has-text-spaced\">\n                      {\n                        this.state.routes.map((route, index) => {\n                          return <Route key={index}\n                                        path={route.path}\n                                        children={\n                                         <span dangerouslySetInnerHTML={{__html:route.title}} />\n                                        }\n                                        exact\n                                        />\n                        })\n                      }\n                    </h3>\n\n                    <h1 className=\"title is-1 is-hidden-tablet has-text-centered is-marginless\">Justin</h1>\n                    <h1 className=\"title is-1 is-hidden-tablet has-text-centered\">Le Tourneau</h1>\n                    <h1 className=\"subtitle drop-shadow is-5 is-spaced is-hidden-tablet has-text-primary has-text-centered\">justin.letourn@gmail.com</h1>\n                    <h3 className=\"subtitle is-5 is-hidden-tablet has-text-centered has-text-spaced\">\n                      {\n                        this.state.routes.map((route, index) => {\n                          return <Route key={index}\n                                        path={route.path}\n                                        children={\n                                         <span dangerouslySetInnerHTML={{__html:route.title}} />\n                                        }\n                                        exact\n                                        />\n                        })\n                      }\n                    </h3>\n                  </div>\n                  <div className=\"column is-hidden-mobile\">\n                    <div className=\"hero-right\">\n                      <div className=\"scroll-content-down\">\n                        <Highlight className=\"code-snip\" language='CodeSnip.language'>\n                          {CodeSnip.code}\n                        </Highlight>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </header>\n          <Suspense fallback={<div>Loading...</div>}>\n            {/*load our different pages*/}\n            <Switch>\n              {\n                this.state.routes.map((route, index) => {\n                    return  <Route key={index}\n                                   path={route.path}\n                                   component={route.component}\n                                   exact\n                                   />\n                })\n              }\n            </Switch>\n          </Suspense>\n        </BrowserRouter>\n        <div className=\"footer\">\n          <div className=\"hero\">\n            <div className=\"columns is-mobile\">\n              <div className=\"column is-2-tablet is-4-mobile\">\n                <div className=\"level is-mobile\">\n                  <div className=\"level-item has-text-centered\">\n                    <a href={process.env.PUBLIC_URL + 'letourneau_resume.pdf'} target=\"_blank\">\n                      <span className=\"icon is-link is-small is-spaced\">\n                        <i className=\"fa fa-file-text\" aria-hidden=\"true\"></i>\n                      </span>\n                    </a>\n                  </div>\n                  <div className=\"level-item has-text-centered\">\n                    <a href=\"https://github.com/theWizardsBaker\">\n                      <span className=\"icon is-link is-small is-spaced\">\n                        <i className=\"fa fa-github\" aria-hidden=\"true\"></i>\n                      </span>\n                    </a>\n                  </div>\n                  <div className=\"level-item has-text-centered\">\n                    <a href=\"mailto:justin.letourn@gmail.com\">\n                      <span className=\"icon is-link is-small is-spaced\">\n                        <i className=\"fa fa-envelope\" aria-hidden=\"true\"></i>\n                      </span>\n                    </a>\n                  </div>\n                  <div className=\"level-item has-text-centered\">\n                    <a href=\"https://www.facebook.com/justin.letourneau\">\n                      <span className=\"icon is-link is-small is-spaced\">\n                        <i className=\"fa fa-facebook\" aria-hidden=\"true\"></i>\n                      </span>\n                    </a>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div>\n              <p>\n                &copy; Justin Le Tourneau, 2020\n              </p>\n            </div>\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}