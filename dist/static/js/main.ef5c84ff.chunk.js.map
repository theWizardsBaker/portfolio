{"version":3,"sources":["components/LinkList.js","components/ScrollToTop.js","components/Navbar.js","components/CodeSnip.js","components/Header.js","components/Footer.js","App.js","index.js"],"names":["LinkList","className","this","props","size","links","map","link","index","key","href","path","title","text","target","rel","icon","aria-hidden","showText","React","Component","defaultProps","ScrollToTop","pathname","useLocation","useEffect","window","scrollTo","Navbar","routes","route","show","to","activeClassName","exact","name","Header","children","language","CodeSnip","Footer","App","state","component","lazy","photos","src","width","height","dangerouslySetInnerHTML","__html","fallback","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ef5c84ff.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class LinkList extends React.Component {\n\n\tstatic defaultProps = {\n\t\tlinks: [],\n\t\tsize: 'small',\n    showText: true\n\t};\n\n  render() {\n    return (\n        <div className={`level ${this.props.size === 'small' ? 'is-mobile' : ''}`}>\n          \t{\n          \t\tthis.props.links.map((link, index) => {\n                return <div key={index} className={`level-item has-text-centered is-${this.props.size}`}>\n\t\t\t                   <a href={link.path} title={link.text} target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t                     <span className=\"icon is-link is-spaced\">\n\t\t\t                       <i className={`fa ${link.icon} ${this.props.size === 'large' ? 'fa-3x' : 'fa-small'}`} aria-hidden=\"true\"></i>\n\t\t\t                     </span>\n                           <div>{this.props.showText ? link.text : ''}</div>\n\t\t\t                   </a>\n\t\t\t                 </div>\n              })\n          \t}\n        </div>\n    );\n  }\n\n}\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}","import React from 'react';\nimport { NavLink } from \"react-router-dom\";\n\nexport default class Navbar extends React.Component {\n\n  static defaultProps = {\n    routes: []\n  };\n\n  render() {\n    return (\n      <nav className=\"navbar is-transparent\">\n        <div className=\"navbar-end\">\n            {\n              this.props.routes.map((route, index) => {\n                  if(route.show == false){\n                    return null\n                  }\n                  return  <NavLink key={index}\n                                   to={route.path}\n                                   activeClassName=\"is-active\"\n                                   className=\"navbar-item\"\n                                   exact>\n                    {route.name}\n                  </NavLink>\n              })\n            }\n        </div>\n      </nav>\n    );\n  }\n\n}\n","const code= `\n#!/usr/bin/env ruby\nrequire 'artii'\nrequire 'colorize'\nrequire 'filesize'\n\n# don't throw an error on exit\ntrap \"SIGINT\" do\n  puts \"\\n Quitting...\"\n  exit 130\nend\n\nbegin\n  \n  # splash screen\n  artii = Artii::Base.new({})\n  puts artii.asciify('SBatch Generator').blue\n  # directions\n  puts \"Generate a #{\"SLURM bash script \".yellow} to run jobs on the rnet research cluster\\n\\n\"\n  # puts \"Run this command with -h for a list of more options\\n\\n\"\n  printf \"Press \"\n  printf \"Ctrl + C \".red\n  puts \"at any time to quit\\n\\n\"\n\n  # create time element\n  t = Time.now \n  # get the script name\n  printf \"Enter a new SBatch script #{\"job name\".green} ( leave blank for \\`sbatch_[date]\\` default ): \"\n  job_name = gets.chomp\n  job_name = \"sbatch_#{t.strftime(\"%Y_%m_%d\")}\" if job_name.empty?\n\n  # our list of nodes\n  nodes = []\n  # list of node header elements\n  node_header = []\n\n  # get all the cluster info\n  # contents = \\`sinfo -S partitionname -O partitionname,available,cpus,cpusstate,defaulttime,freemem,memory\\`\n  # for testing only \n  contents = \\`cat sinfo_output\\`\n  # put all the clusters into a selectable object\n  contents.split(\"\\n\").each_with_index do |line, index| \n    line = line.split(\"\\s\")\n    # get our header rows\n    if index < 1\n      node_header = line \n      next\n    end\n    # create a node\n    nodes.push({\n      name: line[0],\n      available: line[1],\n      cpus: line[2].sub('+', '').to_i,\n      cpus_state: line[3].split(\"/\"),\n      time_limit: line[4],\n      free_memory: line[5].to_i,\n      total_memory: line[6].sub('+', '').to_i\n    })\n  end\n  # list our nodes\n  nodes.each.with_index(1) do |node, index|  \n    puts \"#{index}) #{node[:name]}\".green\n    free = (node[:cpus_state][1].to_f / (node[:cpus_state][0].to_f.nonzero? || node[:cpus_state][1].to_f) ) * 100\n    puts \"[ CPU => #{node[:cpus]} (#{free.to_i} % free), MEM => #{Filesize.from(\"#{node[:total_memory]} MB\").to_s(\"GB\")} (#{Filesize.from(\"#{node[:free_memory]} MB\").to_s(\"GB\")} free), TIME LIMIT => #{node[:time_limit]} ]\".colorize((:red unless node[:available].eql? 'up'))\n    puts \"-----------------------------\"\n  end\n\n  # get the cluster to use\n  # node_selection.is_a? Numeric and \n  node_selection = 0\n  until (1..nodes.size).include? node_selection\n    printf \"\\nSelect a cluster from the list above to run on (number): \"\n    node_selection = gets.chomp.to_i\n  end\n\n  # get the node\n  selected_node = nodes[node_selection - 1]\n\n  # get cpu usage\n  cpus = 0\n  until (1..selected_node[:cpus]).include? cpus\n    puts \"\\nThe #{selected_node[:name]} node has #{selected_node[:cpus].to_s.green} total CPUs available.\"\n    printf \"Number of CPUs to use: \"\n    cpus = gets.chomp.to_i\n  end\n\n  # get the memory\n  memory = 0\n  until (1..selected_node[:total_memory]).include? memory.to_i and memory =~ /\\d*[M|G]/\n    # get memory size\n    mem_gb = Filesize.from(selected_node[:total_memory].to_s + \"MB\").to_s(\"GB\")\n    # print memory\n    puts \"\\n#{\"#{selected_node[:total_memory]} MB\".green} (#{mem_gb.green}) total memory is available.\"\n    printf \"Amount of Memory to use (suffix #{\"M\".green} for megabytes and #{\"G\".green} for gigabytes): \"\n    memory = gets.chomp.upcase\n    memory = memory.gsub(/\\s/, '')\n  end\n\n  # figure out time\n  selected_node[:time_limit]\n  days = selected_node[:time_limit].slice!(/\\d*-/)\n  hours, minutes, seconds = selected_node[:time_limit].split(\":\")\n\n  time = \"\"\n  # make sure it's in a close enough format\n  until time =~ /(\\d-)?\\d{1,2}(:\\d{1,2})*/\n    printf \"\\nThe maximum time alloted is\"\n    printf \" #{days[/\\d*/]} days\".green if days \n    printf \" #{hours} hours\".green if hours and hours != '00'\n    printf \" #{minutes} minutes\".green if minutes and minutes != '00'\n    printf \" #{seconds} seconds\".green if seconds and seconds != '00'\n    puts \".\"\n    puts \"Time formats include:\"\n    puts \"minutes (20) \\nminutes:seconds (20:15) \\nhours:minutes:seconds (2:20:15)\\ndays-hours (1-2)\\ndays-hours:minutes (1-2:20) \\ndays-hours:minutes:seconds (1-2:20:15)\".yellow\n    printf  \"Estimate job completion time: \"\n    time = gets.chomp\n    time = time.gsub(/[A-z]/, '')\n    time = selected_node[:time_limit] if time.empty?\n  end\n\n\n  # check if notifications\n  printf \"\\nWould you like email notification for you job's status? (yes / no): \"\n  updates = gets.chomp.downcase.match(/^y/)\n\n\n  email = \"\"\n  update_types = \"\"\n  if updates\n    until not email.empty? \n      printf \"Enter your #{\"email\".green}: \"\n      email = gets.chomp.downcase\n    end\n\n    until %w( BEGIN END FAIL ALL ).include? update_types\n      puts \"Select the job status for notifications\"\n      printf \"select #{\"BEGIN END FAIL\".green} or #{\"ALL\".green}: \"\n      update_types = gets.chomp.upcase\n    end\n  end\n\n\n  # get the output name\n  puts \"\\nEnter the #{\"command\".green} to execute.\"\n  puts \"If you need to execute multiple lines, it is recommended to leave this blank and edit the #{\"#{job_name}.sh\".green} file after creation.\"\n  printf \"Command: \"\n  code_snip = gets.chomp\n\n  # get the output name\n  puts \"\\nThe results from the commands above will be placed in an output file.\"\n  printf \"Enter an output file name ( leave blank for \\`#{job_name}_[job-id].out\\` default ): \"\n  output_file = gets.chomp\n  output_file = \"#{job_name}_%j.out\" if output_file.empty?\n\n\n  File.open(\"#{job_name}.sh\", 'w') do |f|\n    f.write(\"#!/bin/bash\")\n    f.write(\"\n## sbatch params:\n## more params found here https://slurm.schedmd.com/sbatch.html\n## ----------------------------\n#SBATCH --partition=#{selected_node[:name]}\n#SBATCH --time=#{time}\n#SBATCH --cpus-per-task=#{cpus} \n#SBATCH --mem=#{memory}\n#SBATCH --job-name=#{job_name}\n#SBATCH --output=#{output_file}\")\n    if updates\n      f.write(\"\n#SBATCH --mail-type=#{update_types}\n#SBATCH --mail-user=#{email}\")\n    end\n    f.write(\"       \n## place your code to run below:\n## ----------------------------\n## example: \n## echo 'Hello World!'\n#{code_snip}\n      \")\n  end\n\n  puts \"----------------------------\"\n  puts \"\\n\\nThe file #{\"#{job_name}.sh\".yellow} has been written to: #{Dir.pwd.yellow}\"\n  puts \"You may run this job with the command: #{\"sbatch #{job_name}.sh\".yellow}\"\nrescue Exception => e\n  puts e\nend\n`;\n\nconst language = 'ruby'\n\nexport default { code: code, language: language };","import React from 'react';\nimport Highlight from 'react-highlight'\nimport CodeSnip from './CodeSnip.js'\n\nexport default class Header extends React.Component {\n\n\tstatic defaultProps = {\n\t\ttitle: ''\n\t};\n\n  render() {\n    return (\n\t    <div className=\"hero-body\">\n\t      <div className=\"header-content\">\n\t        <div className=\"columns\">\n\t          <div className=\"column is-7-desktop is-8-tablet\">\n\t            <h1 className=\"title drop-shadow is-huge is-hidden-mobile\">Justin</h1>\n\t            <h1 className=\"title drop-shadow is-huge is-hidden-mobile\">Le Tourneau</h1>\n\t            <h1 className=\"subtitle drop-shadow is-3 is-spaced is-hidden-mobile has-text-gray\">justin.letourn@gmail.com</h1>\n\t            <h3 className=\"subtitle drop-shadow is-4 is-hidden-mobile has-text-spaced has-text-gray\">\n\t            \t{this.props.children}\n\t            </h3>\n\n\t            <h1 className=\"title is-2 is-hidden-tablet has-text-centered is-marginless\">Justin</h1>\n\t            <h1 className=\"title is-2 is-hidden-tablet has-text-centered\">Le Tourneau</h1>\n\t            <h1 className=\"subtitle drop-shadow is-5 is-spaced is-hidden-tablet has-text-gray has-text-centered\">justin.letourn@gmail.com</h1>\n\t            <h3 className=\"subtitle is-5 is-hidden-tablet has-text-centered has-text-spaced has-text-gray\">\n\t            \t{this.props.children}\n\t            </h3>\n\t          </div>\n\t          <div className=\"column is-hidden-mobile\">\n\t            <div className=\"hero-right\">\n\t              <div className=\"scroll-content-down\">\n\t                <Highlight className=\"code-snip\" language='CodeSnip.language'>\n\t                  {CodeSnip.code}\n\t                </Highlight>\n\t              </div>\n\t            </div>\n\t          </div>\n\t        </div>\n\t      </div>\n\t    </div>\n    );\n  }\n\n}\n","import React from 'react'\nimport LinkList from './LinkList.js'\n\nexport default class Footer extends React.Component {\n\n\tstatic defaultProps = {\n\t\tlinks: [],\n\t};\n\n  render() {\n    return (\n        <div className=\"footer\">\n          <div className=\"hero\">\n            <div className=\"columns is-mobile is-hidden-mobile\">\n              <div className=\"column is-2-tablet is-4-mobile\">\n              \t<LinkList links={this.props.links} showText={false}/>\n              </div>\n            </div>\n            <div>\n              <div className=\"is-hidden-tablet\">\n                <LinkList links={this.props.links} showText={false}/>\n              </div>\n              <p className=\"has-text-link\">\n                Site built using React, Bulma and Node.js\n                <br/>\n                Source Code Available <a href=\"https://github.com/theWizardsBaker/portfolio\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a>\n              </p>\n              <p className=\"has-text-link\">\n                &copy; Justin Le Tourneau, 2020\n              </p>\n            </div>\n          </div>\n        </div>\n    );\n  }\n\n}\n","import React, { Suspense, lazy } from 'react';\nimport ScrollToTop from './components/ScrollToTop.js'\nimport Navbar from './components/Navbar.js'\nimport Header from './components/Header.js'\nimport Footer from './components/Footer.js'\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nimport './App.sass';\n\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      routes: [\n        {\n          path: '/',\n          name: 'Programming',\n          title: \"\\{ Developer Administrator Co-Founder \\}\",\n          component: lazy(() => import('./components/HomePage')),\n        },\n        {\n          path: '/artwork',\n          name: 'Artwork',\n          title: 'Scratchboards &bull; Portraits &bull; Digital Art',\n          component: lazy(() => import('./components/Artwork'))\n        },\n        {\n          path: '/projects',\n          name: 'Current Projects',\n          title: '&lsaquo; Games Projects Testing &rsaquo;',\n          component: lazy(() => import('./components/Games'))\n        },\n        {\n          path: '/emdr',\n          name: 'EMDR',\n          title: '&lsaquo; EMDR Squirell for Stephanie &rsaquo;',\n          component: lazy(() => import('./components/EMDR')),\n          show: false\n        }\n      ],\n      photos: [\n        {\n          src: '/artwork/vince.jpg',\n          width: 4,\n          height: 3,\n        },\n        {\n          src: '/artwork/bird2.jpg',\n          width: 4,\n          height: 3,\n        },\n        {\n          src: '/artwork/tiger2.jpg',\n          width: 4,\n          height: 3,\n        },\n        {\n          src: '/artwork/tiger.jpg',\n          width: 16,\n          height: 9,\n        },\n                {\n          src: '/artwork/lupe.jpg',\n          width: 16,\n          height: 9,\n        },\n        {\n          src: '/artwork/squirell.jpg',\n          width: 16,\n          height: 9,\n        },\n        {\n          src: '/artwork/rabbit.jpg',\n          width: 4,\n          height: 3,\n        },\n        {\n          src: '/artwork/bird.jpg',\n          width: 4,\n          height: 3,\n        },\n        {\n          src: '/artwork/dog.jpg',\n          width: 4,\n          height: 3,\n        },\n        {\n          src: '/artwork/wolf.jpg',\n          width: 4,\n          height: 3,\n        },\n        {\n          src: '/artwork/bird3.jpg',\n          width: 4,\n          height: 3,\n        },\n        {\n          src: '/artwork/duke.jpg',\n          width: 16,\n          height: 8,\n        },\n        {\n          src: '/artwork/lion.jpg',\n          width: 16,\n          height: 9,\n        },\n        {\n          src: '/artwork/bailey.jpg',\n          width: 16,\n          height: 9,\n        },\n      ],\n      links: [\n        {\n          path: process.env.PUBLIC_URL + 'letourneau_resume.pdf',\n          icon: \"fa-file-text\",\n          text: \"Resume\"\n        },\n        {\n          path: \"https://github.com/theWizardsBaker\",\n          icon: \"fa-github\",\n          text: \"Github\"\n        },\n        {\n          path: \"mailto:justin.letourn@gmail.com\",\n          icon: \"fa-envelope\",\n          text: \"Email\"\n        }\n      ]\n      // <span className=\"icon is-link is-small is-spaced\">\n\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <BrowserRouter>\n          {/* component to scroll to top */}\n          <ScrollToTop />\n          <header className=\"hero is-warning\">\n            <div className=\"hero-head\">\n              {/* show navbar */}\n              <Navbar routes={this.state.routes} />\n            </div>\n            {/* page headder */}\n            <Header>\n              {\n                this.state.routes.map((route, index) => {\n                  return <Route key={index}\n                                path={route.path}\n                                children={\n                                 <span dangerouslySetInnerHTML={{__html:route.title}} />\n                                }\n                                exact\n                                />\n                })\n              }\n            </Header>\n          </header>\n          <Suspense fallback={\n            <div className=\"hero is-small is-info\">\n              <div className=\"hero-body has-text-centered\">\n                <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\n              </div>\n            </div>\n          }>\n\n            {/*load our different pages*/}\n            <Switch>\n              {\n                this.state.routes.map((route, index) => {\n                    let Component = route.component;\n                    return  <Route key={index}\n                                   path={route.path}\n                                   render={() => <Component photos={this.state.photos} title=\"route.title\" links={this.state.links} /> }\n                                   exact\n                                   />\n                })\n              }\n            </Switch>\n          </Suspense>\n        </BrowserRouter>\n        <Footer links={this.state.links} />\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}